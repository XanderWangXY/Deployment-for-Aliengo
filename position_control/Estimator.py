import time
import torch
from position_control import Position

class InitPos:
    def __init__(self, a_x, a_y, a_z, m_x, m_y, m_z):
        self.g = torch.tensor([0, 0, -9.81])
        self.a_imu = torch.Tensor([a_x, a_y, a_z])
        self.m_imu = torch.Tensor([m_x, m_y, m_z])

    def get_Euler(self):
        self.roll = torch.asin(self.a_imu[1] / torch.sqrt(self.a_imu[0] ** 2 + self.a_imu[1] ** 2 + self.a_imu[2] ** 2))
        self.pitch = torch.atan(2 * (-self.a_imu[0] / self.a_imu[2]))
        m_xn = self.m_imu[0] * torch.cos(self.pitch) + self.m_imu[2] * torch.sin(self.pitch)
        m_yn = (self.m_imu[0] * torch.sin(self.pitch) * torch.sin(self.roll)
                + self.m_imu[1] * torch.cos(self.roll)
                - self.m_imu[2] * torch.cos(self.pitch) * torch.sin(self.roll))
        self.yaw = torch.atan2(m_yn, m_xn)

    def euler_to_quat(self):
        cy = torch.cos(self.yaw * 0.5)
        sy = torch.sin(self.yaw * 0.5)
        cr = torch.cos(self.roll * 0.5)
        sr = torch.sin(self.roll * 0.5)
        cp = torch.cos(self.pitch * 0.5)
        sp = torch.sin(self.pitch * 0.5)

        qw = cy * cr * cp + sy * sr * sp
        qx = cy * sr * cp - sy * cr * sp
        qy = cy * cr * sp + sy * sr * cp
        qz = sy * cr * cp - cy * sr * sp

        self.quat = torch.stack([qx, qy, qz, qw], dim=-1)

    def euler_to_rot(self):
        cy = torch.cos(self.yaw)
        sy = torch.sin(self.yaw)
        cr = torch.cos(self.roll)
        sr = torch.sin(self.roll)
        cp = torch.cos(self.pitch)
        sp = torch.sin(self.pitch)

        self.rot_mat = torch.cat(((cy * cp * cr - sy * sr).unsqueeze(-1),    (cy * cp * sr + sy * cr).unsqueeze(-1),     (-cy * sp).unsqueeze(-1),
                                  (-sy * cp * cr - cy * sr).unsqueeze(-1),   (-sy * cp * sr + cy * cr).unsqueeze(-1),    (sy * sp).unsqueeze(-1),
                                  (sp * cr).unsqueeze(-1),                   (sp * sr).unsqueeze(-1),                    cp.unsqueeze(-1))).reshape(3,3)

    def get_a_world(self):
        self.a_world = self.rot_mat * self.a_imu + self.g


class KF:
    def __init__(self):
        self.dt = 0.002

        self.A_c = torch.zeros(18, 18)
        self.A_c[0][3] = 1
        self.A_c[1][4] = 1
        self.A_c[2][5] = 1
        self.A = torch.eye(self.A_c.shape[0]) + self.dt * self.A_c

        self.B_c = torch.zeros(18, 3)
        self.B_c[3][0] = 1
        self.B_c[4][1] = 1
        self.B_c[5][2] = 1
        self.B = self.dt * self.B_c

        eye3 = torch.eye(3, 3)
        zero3 = torch.zeros(3, 3)
        C0 = torch.cat((-eye3, zero3, eye3, zero3, zero3, zero3), dim=-1)
        C1 = torch.cat((-eye3, zero3, zero3, eye3, zero3, zero3), dim=-1)
        C2 = torch.cat((-eye3, zero3, zero3, zero3, eye3, zero3), dim=-1)
        C3 = torch.cat((-eye3, zero3, zero3, zero3, zero3, eye3), dim=-1)
        C4 = torch.cat((zero3, -eye3, zero3, zero3, zero3, zero3), dim=-1)
        C5 = torch.cat((zero3, -eye3, zero3, zero3, zero3, zero3), dim=-1)
        C6 = torch.cat((zero3, -eye3, zero3, zero3, zero3, zero3), dim=-1)
        C7 = torch.cat((zero3, -eye3, zero3, zero3, zero3, zero3), dim=-1)
        C8 = torch.zeros(4, 18)
        C8[0][8] = 1
        C8[1][11] = 1
        C8[2][14] = 1
        C8[3][17] = 1
        self.C = torch.cat((C0, C1, C2, C3, C4, C5, C6, C7, C8))

        self.p_b = torch.zeros(3, 1)  # 机身位置
        self.v_b = torch.zeros(3, 1)  # 机身速度
        self.p_0 = torch.zeros(3, 1)  # 足端位置
        self.p_1 = torch.zeros(3, 1)  # 足端位置
        self.p_2 = torch.zeros(3, 1)  # 足端位置
        self.p_3 = torch.zeros(3, 1)  # 足端位置

        self.x = torch.cat((self.p_b, self.v_b, self.p_0, self.p_1, self.p_2, self.p_3))
        self.y = self.C @ self.x
        self.P = torch.eye(18) * 999

        # 过程噪声 w~(0,Q)
        self.C_u = [268.573, -43.819, -147.211,
                    -43.819, 92.949, 58.082,
                    -147.211, 58.082, 302.120]
        self.C_u = torch.Tensor(self.C_u).reshape(3, 3)
        self.Q = self.B @ self.C_u @ torch.transpose(self.B, dim0=0, dim1=1)

        # 测量噪声 w~(0,R)
        self.R = [0.008, 0.012, -0.000, -0.009, 0.012, 0.000, 0.009, -0.009, -0.000, -0.009, -0.009, 0.000, -0.000,
                  0.000, -0.000,
                  0.000, -0.000, -0.001, -0.002, 0.000, -0.000, -0.003, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000,
                  0.012, 0.019, -0.001, -0.014, 0.018, -0.000, 0.014, -0.013, -0.000, -0.014, -0.014, 0.001, -0.001,
                  0.001, -0.001,
                  0.000, 0.000, -0.001, -0.003, 0.000, -0.001, -0.004, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000,
                  -0.000, -0.001, 0.001, 0.001, -0.001, 0.000, -0.000, 0.000, -0.000, 0.001, 0.000, -0.000, 0.000,
                  -0.000, 0.000,
                  0.000, -0.000, -0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                  -0.009, -0.014, 0.001, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001, 0.000,
                  0.000,
                  0.001, -0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000,
                  0.012, 0.018, -0.001, -0.013, 0.018, -0.000, 0.013, -0.013, -0.000, -0.013, -0.013, 0.001, -0.001,
                  0.000, -0.001,
                  0.000, 0.001, -0.001, -0.003, 0.000, -0.001, -0.004, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000,
                  0.000, -0.000, 0.000, 0.000, -0.000, 0.001, 0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, 0.000,
                  -0.000,
                  0.000, 0.000, 0.000, -0.000, -0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                  0.009, 0.014, -0.000, -0.010, 0.013, 0.000, 0.010, -0.010, -0.000, -0.010, -0.010, 0.000, -0.001,
                  0.000, -0.001,
                  0.000, -0.000, -0.001, -0.001, 0.000, -0.000, -0.003, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000,
                  -0.009, -0.013, 0.000, 0.010, -0.013, 0.000, -0.010, 0.009, 0.000, 0.010, 0.010, -0.000, 0.001,
                  -0.000, 0.000,
                  -0.000, 0.000, 0.001, 0.002, 0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000,
                  -0.000, -0.000, -0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000,
                  -0.000, 0.000,
                  -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000,
                  -0.009, -0.014, 0.001, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001, 0.000,
                  0.000,
                  -0.000, -0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000,
                  -0.009, -0.014, 0.000, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001,
                  -0.000, 0.000,
                  -0.000, 0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000,
                  0.000, 0.001, -0.000, -0.000, 0.001, -0.000, 0.000, -0.000, 0.000, -0.000, -0.000, 0.001, 0.000,
                  -0.000, -0.000,
                  -0.000, 0.000, 0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                  -0.000, -0.001, 0.000, 0.001, -0.001, -0.000, -0.001, 0.001, 0.000, 0.001, 0.001, 0.000, 1.708, 0.048,
                  0.784,
                  0.062, 0.042, 0.053, 0.077, 0.001, -0.061, 0.046, -0.019, -0.029, 0.000, 0.000, 0.000, 0.000,
                  0.000, 0.001, -0.000, 0.000, 0.000, 0.000, 0.000, -0.000, -0.000, 0.000, -0.000, -0.000, 0.048, 5.001,
                  -1.631,
                  -0.036, 0.144, 0.040, 0.036, 0.016, -0.051, -0.067, -0.024, -0.005, 0.000, 0.000, 0.000, 0.000,
                  -0.000, -0.001, 0.000, 0.000, -0.001, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000, -0.000, 0.784,
                  -1.631, 1.242,
                  0.057, -0.037, 0.018, 0.034, -0.017, -0.015, 0.058, -0.021, -0.029, 0.000, 0.000, 0.000, 0.000,
                  0.000, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, -0.000, -0.000, -0.000, -0.000, -0.000, 0.062,
                  -0.036, 0.057,
                  6.228, -0.014, 0.932, 0.059, 0.053, -0.069, 0.148, 0.015, -0.031, 0.000, 0.000, 0.000, 0.000,
                  -0.000, 0.000, -0.000, -0.000, 0.001, 0.000, -0.000, 0.000, 0.000, -0.000, 0.000, 0.000, 0.042, 0.144,
                  -0.037,
                  -0.014, 3.011, 0.986, 0.076, 0.030, -0.052, -0.027, 0.057, 0.051, 0.000, 0.000, 0.000, 0.000,
                  -0.001, -0.001, -0.000, 0.001, -0.001, 0.000, -0.001, 0.001, -0.000, 0.001, 0.001, 0.000, 0.053,
                  0.040, 0.018,
                  0.932, 0.986, 0.885, 0.090, 0.044, -0.055, 0.057, 0.051, -0.003, 0.000, 0.000, 0.000, 0.000,
                  -0.002, -0.003, 0.000, 0.002, -0.003, -0.000, -0.001, 0.002, 0.000, 0.002, 0.002, -0.000, 0.077,
                  0.036, 0.034,
                  0.059, 0.076, 0.090, 6.230, 0.139, 0.763, 0.013, -0.019, -0.024, 0.000, 0.000, 0.000, 0.000,
                  0.000, 0.000, -0.000, -0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.001,
                  0.016, -0.017,
                  0.053, 0.030, 0.044, 0.139, 3.130, -1.128, -0.010, 0.131, 0.018, 0.000, 0.000, 0.000, 0.000,
                  -0.000, -0.001, -0.000, 0.000, -0.001, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -0.061,
                  -0.051, -0.015,
                  -0.069, -0.052, -0.055, 0.763, -1.128, 0.866, -0.022, -0.053, 0.007, 0.000, 0.000, 0.000, 0.000,
                  -0.003, -0.004, -0.000, 0.003, -0.004, -0.000, -0.003, 0.003, 0.000, 0.003, 0.003, 0.000, 0.046,
                  -0.067, 0.058,
                  0.148, -0.027, 0.057, 0.013, -0.010, -0.022, 2.437, -0.102, 0.938, 0.000, 0.000, 0.000, 0.000,
                  -0.000, -0.000, 0.000, 0.000, -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, 0.001, 0.000, -0.019,
                  -0.024, -0.021,
                  0.015, 0.057, 0.051, -0.019, 0.131, -0.053, -0.102, 4.944, 1.724, 0.000, 0.000, 0.000, 0.000,
                  -0.001, -0.001, 0.000, 0.001, -0.001, 0.000, -0.001, 0.001, -0.000, 0.001, 0.001, 0.000, -0.029,
                  -0.005, -0.029,
                  -0.031, 0.051, -0.003, -0.024, 0.018, 0.007, 0.938, 1.724, 1.569, 0.000, 0.000, 0.000, 0.000,
                  0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                  0.000, 0.000,
                  0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000, 0.000, 0.000,
                  0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                  0.000, 0.000,
                  0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000, 0.000,
                  0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                  0.000, 0.000,
                  0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000,
                  0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
                  0.000, 0.000,
                  0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0]
        self.R = torch.Tensor(self.R).reshape(28, 28)

    def kalman_filter(self, u):
        x_est = self.A @ self.x + self.B @ u
        P_est = self.A @ self.P * torch.transpose(self.A, dim0=0, dim1=1) + self.Q

        K = P_est @ torch.transpose(self.C, dim0=0, dim1=1) @ torch.inverse(
            self.C @ P_est @ torch.transpose(self.C, dim0=0, dim1=1) + self.R)
        self.x = x_est + K @ (self.y - self.C @ x_est)
        self.P = (torch.eye((K @ self.C).shape[0]) - K @ self.C) @ P_est

    def run_KF(self):
        pass

if __name__ == '__main__':
    position=Position()
    kf=KF()
    while True:
        position.receive_state()
        time.sleep(0.002)
        imu_rpy=[position.state.imu.rpy[0],position.state.imu.rpy[1],position.state.imu.rpy[2]]
        imu_acc=[position.state.imu.accelerometer[0],position.state.imu.accelerometer[1],position.state.imu.accelerometer[2]]
        imu_gyo=[position.state.imu.gyroscope[0],position.state.imu.gyroscope[1],position.state.imu.gyroscope[2]]
        initpos=InitPos(imu_acc[0],imu_acc[1],imu_acc[2],imu_gyo[0],imu_gyo[1],imu_gyo[2])

        initpos.get_Euler()
        initpos.euler_to_rot()
        initpos.get_a_world()

        print(initpos.a_world)

        imu_rpy=torch.Tensor(imu_rpy)
        imu_rpy=imu_rpy.reshape(3,1)
        print(imu_rpy)
        #imu_rpy=torch.Tensor([position.state.imu.rpy[0]],[position.state.imu.rpy[1]],[position.state.imu.rpy[2]])
        kf.kalman_filter(imu_rpy)
        print(kf.x)
